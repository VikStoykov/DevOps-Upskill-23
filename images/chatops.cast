{"version": 2, "width": 206, "height": 57, "timestamp": 1706388746, "env": {"SHELL": "/bin/bash", "TERM": "xterm-256color"}}
[0.052633, "o", "\u001b[?2004hvictor@victors-ubuntu:~/Downloads/DevOps-Upskill-23/terraform$ "]
[2.338819, "o", "\u001b[7msudo terraform validate\u001b[27m"]
[3.384378, "o", "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\bsudo terraform validate\r\n\u001b[?2004l\r"]
[3.387973, "o", "[sudo] password for victor: "]
[5.872606, "o", "\r\n"]
[7.864689, "o", "\u001b[32m\u001b[1mSuccess!\u001b[0m The configuration is valid.\r\n\u001b[0m\r\n"]
[7.871394, "o", "\u001b[?2004hvictor@victors-ubuntu:~/Downloads/DevOps-Upskill-23/terraform$ "]
[9.702943, "o", "\u001b[7msudo terraform plan -target=module.notify\u001b[27m"]
[10.712063, "o", "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\bsudo terraform plan -target=module.notify\r\n\u001b[?2004l\r"]
[12.810215, "o", "\u001b[0m\u001b[1mmodule.notify.data.archive_file.send_cloudwatch_alarms_to_slack: Reading...\u001b[0m\u001b[0m\r\n"]
[12.812155, "o", "\u001b[0m\u001b[1mmodule.notify.data.archive_file.send_cloudwatch_alarms_to_slack: Read complete after 0s [id=7d4aa651ec683a5d83a25f1c0ba83487164ec07b]\u001b[0m\r\n"]
[13.218895, "o", "\r\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\r\n  \u001b[32m+\u001b[0m create\u001b[0m\r\n\r\nTerraform will perform the following actions:\r\n"]
[13.218927, "o", "\r\n\u001b[1m  # module.notify.aws_cloudwatch_log_group.send_cloudwatch_alarms_to_slack\u001b[0m will be created\r\n\u001b[0m  \u001b[32m+\u001b[0m\u001b[0m resource \"aws_cloudwatch_log_group\" \"send_cloudwatch_alarms_to_slack\" {\r\n      \u001b[32m+\u001b[0m\u001b[0m arn               = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m id                = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m log_group_class   = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m name              = \"/aws/lambda/send-cloudwatch-alarms-to-slack\"\r\n      \u001b[32m+\u001b[0m\u001b[0m name_prefix       = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m retention_in_days = 14\r\n      \u001b[32m+\u001b[0m\u001b[0m skip_destroy      = false\r\n      \u001b[32m+\u001b[0m\u001b[0m tags_all          = (known after apply)\r\n    }\r\n"]
[13.219026, "o", "\r\n\u001b[1m  # module.notify.aws_iam_role.send_cloudwatch_alarms_to_slack\u001b[0m will be created\r\n\u001b[0m  \u001b[32m+\u001b[0m\u001b[0m resource \"aws_iam_role\" \"send_cloudwatch_alarms_to_slack\" {\r\n      \u001b[32m+\u001b[0m\u001b[0m arn                   = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m assume_role_policy    = jsonencode(\r\n            {\r\n              \u001b[32m+\u001b[0m\u001b[0m Statement = [\r\n                  \u001b[32m+\u001b[0m\u001b[0m {\r\n                      \u001b[32m+\u001b[0m\u001b[0m Action    = \"sts:AssumeRole\"\r\n                      \u001b[32m+\u001b[0m\u001b[0m Effect    = \"Allow\"\r\n                      \u001b[32m+\u001b[0m\u001b[0m Principal = {\r\n                          \u001b[32m+\u001b[0m\u001b[0m Service = \"lambda.amazonaws.com\"\r\n                        }\r\n                    },\r\n                ]\r\n              \u001b[32m+\u001b[0m\u001b[0m Version   = \"2012-10-17\"\r\n            }\r\n        )\r\n      \u001b[32m+\u001b[0m\u001b[0m create_date           = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m force_detach_policies = false\r\n      \u001b[32m+\u001b[0m\u001b[0m id                    = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m managed_policy_arns   = ("]
[13.219041, "o", "known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m max_session_duration  = 3600\r\n      \u001b[32m+\u001b[0m\u001b[0m name                  = \"send-cloudwatch-alarms-to-slack\"\r\n      \u001b[32m+\u001b[0m\u001b[0m name_prefix           = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m path                  = \"/\"\r\n      \u001b[32m+\u001b[0m\u001b[0m tags_all              = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m unique_id             = (known after apply)\r\n    }\r\n"]
[13.219047, "o", "\r\n\u001b[1m  # module.notify.aws_iam_role.sns_logs\u001b[0m will be created\r\n\u001b[0m  \u001b[32m+\u001b[0m\u001b[0m resource \"aws_iam_role\" \"sns_logs\" {\r\n      \u001b[32m+\u001b[0m\u001b[0m arn                   = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m assume_role_policy    = jsonencode(\r\n            {\r\n              \u001b[32m+\u001b[0m\u001b[0m Statement = [\r\n                  \u001b[32m+\u001b[0m\u001b[0m {\r\n                      \u001b[32m+\u001b[0m\u001b[0m Action    = \"sts:AssumeRole\"\r\n                      \u001b[32m+\u001b[0m\u001b[0m Effect    = \"Allow\"\r\n                      \u001b[32m+\u001b[0m\u001b[0m Principal = {\r\n                          \u001b[32m+\u001b[0m\u001b[0m Service = \"sns.amazonaws.com\"\r\n                        }\r\n                    },\r\n                ]\r\n              \u001b[32m+\u001b[0m\u001b[0m Version   = \"2012-10-17\"\r\n            }\r\n        )\r\n      \u001b[32m+\u001b[0m\u001b[0m create_date           = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m force_detach_policies = false\r\n      \u001b[32m+\u001b[0m\u001b[0m id                    = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m managed_policy_arns   = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m max_sess"]
[13.219056, "o", "ion_duration  = 3600\r\n      \u001b[32m+\u001b[0m\u001b[0m name                  = \"sns-logs\"\r\n      \u001b[32m+\u001b[0m\u001b[0m name_prefix           = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m path                  = \"/\"\r\n      \u001b[32m+\u001b[0m\u001b[0m tags_all              = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m unique_id             = (known after apply)\r\n    }\r\n\r\n\u001b[1m  # module.notify.aws_iam_role_policy_attachment.send_cloudwatch_alarms_to_slack_basic\u001b[0m will be created\r\n\u001b[0m  \u001b[32m+\u001b[0m\u001b[0m resource \"aws_iam_role_policy_attachment\" \"send_cloudwatch_alarms_to_slack_basic\" {\r\n      \u001b[32m+\u001b[0m\u001b[0m id         = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m policy_arn = \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\r\n      \u001b[32m+\u001b[0m\u001b[0m role       = \"send-cloudwatch-alarms-to-slack\"\r\n    }\r\n\r\n\u001b[1m  # module.notify.aws_iam_role_policy_attachment.sns_logs\u001b[0m will be created\r\n\u001b[0m  \u001b[32m+\u001b[0m\u001b[0m resource \"aws_iam_role_policy_attachment\" \"sns_logs\" {\r\n      \u001b[32m+\u001b[0m\u001b[0m id         = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m"]
[13.219061, "o", " policy_arn = \"arn:aws:iam::aws:policy/service-role/AmazonSNSRole\"\r\n      \u001b[32m+\u001b[0m\u001b[0m role       = \"sns-logs\"\r\n    }\r\n"]
[13.219215, "o", "\r\n\u001b[1m  # module.notify.aws_lambda_function.send_cloudwatch_alarms_to_slack\u001b[0m will be created\r\n\u001b[0m  \u001b[32m+\u001b[0m\u001b[0m resource \"aws_lambda_function\" \"send_cloudwatch_alarms_to_slack\" {\r\n      \u001b[32m+\u001b[0m\u001b[0m architectures                  = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m arn                            = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m function_name                  = \"send-cloudwatch-alarms-to-slack\"\r\n      \u001b[32m+\u001b[0m\u001b[0m handler                        = \"function.lambda_handler\"\r\n      \u001b[32m+\u001b[0m\u001b[0m id                             = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m invoke_arn                     = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m last_modified                  = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m memory_size                    = 128\r\n      \u001b[32m+\u001b[0m\u001b[0m package_type                   = \"Zip\"\r\n      \u001b[32m+\u001b[0m\u001b[0m publish                        = false\r\n      \u001b[32m+\u001b[0m\u001b[0m qualified_arn                  = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m qualified_invoke"]
[13.21923, "o", "_arn           = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m reserved_concurrent_executions = -1\r\n      \u001b[32m+\u001b[0m\u001b[0m role                           = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m runtime                        = \"python3.9\"\r\n      \u001b[32m+\u001b[0m\u001b[0m s3_bucket                      = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m s3_key                         = \"send-cloudwatch-alarms-to-slack.zip\"\r\n      \u001b[32m+\u001b[0m\u001b[0m signing_job_arn                = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m signing_profile_version_arn    = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m skip_destroy                   = false\r\n      \u001b[32m+\u001b[0m\u001b[0m source_code_hash               = \"wVVzwPcTh/DO2RoI6NhdtoNTy6aP2/yNkG3HuEE6Y2c=\"\r\n      \u001b[32m+\u001b[0m\u001b[0m source_code_size               = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m tags_all                       = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m timeout                        = 3\r\n      \u001b[32m+\u001b[0m\u001b[0m version                        = (known after apply)\r\n    }\r\n\r\n\u001b[1m  # module"]
[13.219237, "o", ".notify.aws_lambda_permission.sns_alarms\u001b[0m will be created\r\n\u001b[0m  \u001b[32m+\u001b[0m\u001b[0m resource \"aws_lambda_permission\" \"sns_alarms\" {\r\n      \u001b[32m+\u001b[0m\u001b[0m action              = \"lambda:InvokeFunction\"\r\n      \u001b[32m+\u001b[0m\u001b[0m function_name       = \"send-cloudwatch-alarms-to-slack\"\r\n      \u001b[32m+\u001b[0m\u001b[0m id                  = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m principal           = \"sns.amazonaws.com\"\r\n      \u001b[32m+\u001b[0m\u001b[0m source_arn          = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m statement_id        = \"AllowExecutionFromSNSAlarms\"\r\n      \u001b[32m+\u001b[0m\u001b[0m statement_id_prefix = (known after apply)\r\n    }\r\n\r\n\u001b[1m  # module.notify.aws_s3_bucket.lambda_bucket\u001b[0m will be created\r\n\u001b[0m  \u001b[32m+\u001b[0m\u001b[0m resource \"aws_s3_bucket\" \"lambda_bucket\" {\r\n      \u001b[32m+\u001b[0m\u001b[0m acceleration_status         = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m acl                         = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m arn                         = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m bucket                      = (kno"]
[13.219243, "o", "wn after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m bucket_domain_name          = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m bucket_prefix               = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m bucket_regional_domain_name = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m force_destroy               = true\r\n      \u001b[32m+\u001b[0m\u001b[0m hosted_zone_id              = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m id                          = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m object_lock_enabled         = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m policy                      = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m region                      = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m request_payer               = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m tags_all                    = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m website_domain              = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m website_endpoint            = (known after apply)\r\n    }\r\n"]
[13.21931, "o", "\r\n\u001b[1m  # module.notify.aws_s3_bucket_public_access_block.lambda_bucket\u001b[0m will be created\r\n\u001b[0m  \u001b[32m+\u001b[0m\u001b[0m resource \"aws_s3_bucket_public_access_block\" \"lambda_bucket\" {\r\n      \u001b[32m+\u001b[0m\u001b[0m block_public_acls       = true\r\n      \u001b[32m+\u001b[0m\u001b[0m block_public_policy     = true\r\n      \u001b[32m+\u001b[0m\u001b[0m bucket                  = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m id                      = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m ignore_public_acls      = true\r\n      \u001b[32m+\u001b[0m\u001b[0m restrict_public_buckets = true\r\n    }\r\n"]
[13.219338, "o", "\r\n\u001b[1m  # module.notify.aws_s3_object.send_cloudwatch_alarms_to_slack\u001b[0m will be created\r\n\u001b[0m  \u001b[32m+\u001b[0m\u001b[0m resource \"aws_s3_object\" \"send_cloudwatch_alarms_to_slack\" {\r\n      \u001b[32m+\u001b[0m\u001b[0m acl                    = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m bucket                 = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m bucket_key_enabled     = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m checksum_crc32         = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m checksum_crc32c        = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m checksum_sha1          = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m checksum_sha256        = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m content_type           = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m etag                   = \"b42521bfa9f66ffc74d1e119d60b5564\"\r\n      \u001b[32m+\u001b[0m\u001b[0m force_destroy          = false\r\n      \u001b[32m+\u001b[0m\u001b[0m id                     = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m key                    = \"send-cloudwatch-alarms-to-slack.zip\"\r\n      \u001b[32m+\u001b[0m\u001b[0m kms_ke"]
[13.219347, "o", "y_id             = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m server_side_encryption = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m source                 = \"functions/send-cloudwatch-alarms-to-slack.zip\"\r\n      \u001b[32m+\u001b[0m\u001b[0m storage_class          = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m tags_all               = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m version_id             = (known after apply)\r\n    }\r\n"]
[13.219443, "o", "\r\n\u001b[1m  # module.notify.aws_sns_topic.alarms\u001b[0m will be created\r\n\u001b[0m  \u001b[32m+\u001b[0m\u001b[0m resource \"aws_sns_topic\" \"alarms\" {\r\n      \u001b[32m+\u001b[0m\u001b[0m arn                                 = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m beginning_archive_time              = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m content_based_deduplication         = false\r\n      \u001b[32m+\u001b[0m\u001b[0m fifo_topic                          = false\r\n      \u001b[32m+\u001b[0m\u001b[0m id                                  = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m lambda_failure_feedback_role_arn    = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m lambda_success_feedback_role_arn    = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m lambda_success_feedback_sample_rate = 100\r\n      \u001b[32m+\u001b[0m\u001b[0m name                                = \"alarms\"\r\n      \u001b[32m+\u001b[0m\u001b[0m name_prefix                         = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m owner                               = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m policy                              = (known after app"]
[13.219457, "o", "ly)\r\n      \u001b[32m+\u001b[0m\u001b[0m signature_version                   = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m tags_all                            = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m tracing_config                      = (known after apply)\r\n    }\r\n"]
[13.219467, "o", "\r\n\u001b[1m  # module.notify.aws_sns_topic_subscription.alarms\u001b[0m will be created\r\n\u001b[0m  \u001b[32m+\u001b[0m\u001b[0m resource \"aws_sns_topic_subscription\" \"alarms\" {\r\n      \u001b[32m+\u001b[0m\u001b[0m arn                             = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m confirmation_timeout_in_minutes = 1\r\n      \u001b[32m+\u001b[0m\u001b[0m confirmation_was_authenticated  = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m endpoint                        = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m endpoint_auto_confirms          = false\r\n      \u001b[32m+\u001b[0m\u001b[0m filter_policy_scope             = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m id                              = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m owner_id                        = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m pending_confirmation            = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m protocol                        = \"lambda\"\r\n      \u001b[32m+\u001b[0m\u001b[0m raw_message_delivery            = false\r\n      \u001b[32m+\u001b[0m\u001b[0m topic_arn                       = (known after apply)\r\n    }\r\n"]
[13.219537, "o", "\r\n\u001b[1m  # module.notify.random_pet.lambda_bucket_name\u001b[0m will be created\r\n\u001b[0m  \u001b[32m+\u001b[0m\u001b[0m resource \"random_pet\" \"lambda_bucket_name\" {\r\n      \u001b[32m+\u001b[0m\u001b[0m id        = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m length    = 2\r\n      \u001b[32m+\u001b[0m\u001b[0m prefix    = \"lambda\"\r\n      \u001b[32m+\u001b[0m\u001b[0m separator = \"-\"\r\n    }\r\n\r\n\u001b[1mPlan:\u001b[0m 13 to add, 0 to change, 0 to destroy.\r\n\u001b[0m\u001b[33m╷\u001b[0m\u001b[0m\r\n\u001b[33m│\u001b[0m \u001b[0m\u001b[1m\u001b[33mWarning: \u001b[0m\u001b[0m\u001b[1mResource targeting is in effect\u001b[0m\r\n\u001b[33m│\u001b[0m \u001b[0m\r\n\u001b[33m│\u001b[0m \u001b[0m\u001b[0mYou are creating a plan with the -target option, which means that the result of this plan may not represent all of the changes requested by the current configuration.\r\n\u001b[33m│\u001b[0m \u001b[0m\r\n\u001b[33m│\u001b[0m \u001b[0mThe -target option is not for routine use, and is provided only for exceptional situations such as recovering from errors or mistakes, or when Terraform specifically suggests to use it as part of an\r\n\u001b[33m│\u001b[0m \u001b[0merror message.\r\n\u001b[33m╵\u001b[0m\u001b[0m\r\n\u001b[90m\r\n─────────────"]
[13.219555, "o", "────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\u001b[0m\r\n\r\nNote: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run \"terraform apply\" now.\r\n"]
[13.226686, "o", "\u001b[?2004hvictor@victors-ubuntu:~/Downloads/DevOps-Upskill-23/terraform$ "]
[17.214491, "o", "\u001b[7msudo terraform apply -target=module.notify\u001b[27m"]
[21.613432, "o", "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\bsudo terraform apply -target=module.notify\r\n"]
[21.613529, "o", "\u001b[?2004l\r"]
[23.766458, "o", "\u001b[0m\u001b[1mmodule.notify.data.archive_file.send_cloudwatch_alarms_to_slack: Reading...\u001b[0m\u001b[0m\r\n"]
[23.770955, "o", "\u001b[0m\u001b[1mmodule.notify.data.archive_file.send_cloudwatch_alarms_to_slack: Read complete after 0s [id=7d4aa651ec683a5d83a25f1c0ba83487164ec07b]\u001b[0m\r\n"]
[24.135998, "o", "\r\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\r\n  \u001b[32m+\u001b[0m create\u001b[0m\r\n\r\nTerraform will perform the following actions:\r\n"]
[24.136029, "o", "\r\n\u001b[1m  # module.notify.aws_cloudwatch_log_group.send_cloudwatch_alarms_to_slack\u001b[0m will be created\r\n\u001b[0m  \u001b[32m+\u001b[0m\u001b[0m resource \"aws_cloudwatch_log_group\" \"send_cloudwatch_alarms_to_slack\" {\r\n      \u001b[32m+\u001b[0m\u001b[0m arn               = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m id                = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m log_group_class   = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m name              = \"/aws/lambda/send-cloudwatch-alarms-to-slack\"\r\n      \u001b[32m+\u001b[0m\u001b[0m name_prefix       = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m retention_in_days = 14\r\n      \u001b[32m+\u001b[0m\u001b[0m skip_destroy      = false\r\n      \u001b[32m+\u001b[0m\u001b[0m tags_all          = (known after apply)\r\n    }\r\n"]
[24.13622, "o", "\r\n\u001b[1m  # module.notify.aws_iam_role.send_cloudwatch_alarms_to_slack\u001b[0m will be created\r\n\u001b[0m  \u001b[32m+\u001b[0m\u001b[0m resource \"aws_iam_role\" \"send_cloudwatch_alarms_to_slack\" {\r\n      \u001b[32m+\u001b[0m\u001b[0m arn                   = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m assume_role_policy    = jsonencode(\r\n            {\r\n              \u001b[32m+\u001b[0m\u001b[0m Statement = [\r\n                  \u001b[32m+\u001b[0m\u001b[0m {\r\n                      \u001b[32m+\u001b[0m\u001b[0m Action    = \"sts:AssumeRole\"\r\n                      \u001b[32m+\u001b[0m\u001b[0m Effect    = \"Allow\"\r\n                      \u001b[32m+\u001b[0m\u001b[0m Principal = {\r\n                          \u001b[32m+\u001b[0m\u001b[0m Service = \"lambda.amazonaws.com\"\r\n                        }\r\n                    },\r\n                ]\r\n              \u001b[32m+\u001b[0m\u001b[0m Version   = \"2012-10-17\"\r\n            }\r\n        )\r\n      \u001b[32m+\u001b[0m\u001b[0m create_date           = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m force_detach_policies = false\r\n      \u001b[32m+\u001b[0m\u001b[0m id                    = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m managed_policy_arns   = ("]
[24.13628, "o", "known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m max_session_duration  = 3600\r\n      \u001b[32m+\u001b[0m\u001b[0m name                  = \"send-cloudwatch-alarms-to-slack\"\r\n      \u001b[32m+\u001b[0m\u001b[0m name_prefix           = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m path                  = \"/\"\r\n      \u001b[32m+\u001b[0m\u001b[0m tags_all              = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m unique_id             = (known after apply)\r\n    }\r\n\r\n\u001b[1m  # module.notify.aws_iam_role.sns_logs\u001b[0m will be created\r\n\u001b[0m  \u001b[32m+\u001b[0m\u001b[0m resource \"aws_iam_role\" \"sns_logs\" {\r\n      \u001b[32m+\u001b[0m\u001b[0m arn                   = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m assume_role_policy    = jsonencode(\r\n            {\r\n              \u001b[32m+\u001b[0m\u001b[0m Statement = [\r\n                  \u001b[32m+\u001b[0m\u001b[0m {\r\n                      \u001b[32m+\u001b[0m\u001b[0m Action    = \"sts:AssumeRole\"\r\n                      \u001b[32m+\u001b[0m\u001b[0m Effect    = \"Allow\"\r\n                      \u001b[32m+\u001b[0m\u001b[0m Principal = {\r\n                          \u001b[32m+\u001b[0m\u001b[0m Service = \"sns.amazonaws.com\"\r\n                        "]
[24.136434, "o", "}\r\n                    },\r\n                ]\r\n              \u001b[32m+\u001b[0m\u001b[0m Version   = \"2012-10-17\"\r\n            }\r\n        )\r\n      \u001b[32m+\u001b[0m\u001b[0m create_date           = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m force_detach_policies = false\r\n      \u001b[32m+\u001b[0m\u001b[0m id                    = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m managed_policy_arns   = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m max_session_duration  = 3600\r\n      \u001b[32m+\u001b[0m\u001b[0m name                  = \"sns-logs\"\r\n      \u001b[32m+\u001b[0m\u001b[0m name_prefix           = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m path                  = \"/\"\r\n      \u001b[32m+\u001b[0m\u001b[0m tags_all              = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m unique_id             = (known after apply)\r\n    }\r\n\r\n\u001b[1m  # module.notify.aws_iam_role_policy_attachment.send_cloudwatch_alarms_to_slack_basic\u001b[0m will be created\r\n\u001b[0m  \u001b[32m+\u001b[0m\u001b[0m resource \"aws_iam_role_policy_attachment\" \"send_cloudwatch_alarms_to_slack_basic\" {\r\n      \u001b[32m+\u001b[0m\u001b[0m id         = (known after apply)\r\n      \u001b[3"]
[24.136464, "o", "2m+\u001b[0m\u001b[0m policy_arn = \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\r\n      \u001b[32m+\u001b[0m\u001b[0m role       = \"send-cloudwatch-alarms-to-slack\"\r\n    }\r\n\r\n\u001b[1m  # module.notify.aws_iam_role_policy_attachment.sns_logs\u001b[0m will be created\r\n\u001b[0m  \u001b[32m+\u001b[0m\u001b[0m resource \"aws_iam_role_policy_attachment\" \"sns_logs\" {\r\n      \u001b[32m+\u001b[0m\u001b[0m id         = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m policy_arn = \"arn:aws:iam::aws:policy/service-role/AmazonSNSRole\"\r\n      \u001b[32m+\u001b[0m\u001b[0m role       = \"sns-logs\"\r\n    }\r\n"]
[24.136552, "o", "\r\n\u001b[1m  # module.notify.aws_lambda_function.send_cloudwatch_alarms_to_slack\u001b[0m will be created\r\n\u001b[0m  \u001b[32m+\u001b[0m\u001b[0m resource \"aws_lambda_function\" \"send_cloudwatch_alarms_to_slack\" {\r\n      \u001b[32m+\u001b[0m\u001b[0m architectures                  = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m arn                            = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m function_name                  = \"send-cloudwatch-alarms-to-slack\"\r\n      \u001b[32m+\u001b[0m\u001b[0m handler                        = \"function.lambda_handler\"\r\n      \u001b[32m+\u001b[0m\u001b[0m id                             = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m invoke_arn                     = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m last_modified                  = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m memory_size                    = 128\r\n      \u001b[32m+\u001b[0m\u001b[0m package_type                   = \"Zip\"\r\n      \u001b[32m+\u001b[0m\u001b[0m publish                        = false\r\n      \u001b[32m+\u001b[0m\u001b[0m qualified_arn                  = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m qualified_invoke"]
[24.136605, "o", "_arn           = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m reserved_concurrent_executions = -1\r\n      \u001b[32m+\u001b[0m\u001b[0m role                           = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m runtime                        = \"python3.9\"\r\n      \u001b[32m+\u001b[0m\u001b[0m s3_bucket                      = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m s3_key                         = \"send-cloudwatch-alarms-to-slack.zip\"\r\n      \u001b[32m+\u001b[0m\u001b[0m signing_job_arn                = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m signing_profile_version_arn    = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m skip_destroy                   = false\r\n      \u001b[32m+\u001b[0m\u001b[0m source_code_hash               = \"wVVzwPcTh/DO2RoI6NhdtoNTy6aP2/yNkG3HuEE6Y2c=\"\r\n      \u001b[32m+\u001b[0m\u001b[0m source_code_size               = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m tags_all                       = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m timeout                        = 3\r\n      \u001b[32m+\u001b[0m\u001b[0m version                        = (known after apply)\r\n    }\r\n"]
[24.136726, "o", "\r\n\u001b[1m  # module.notify.aws_lambda_permission.sns_alarms\u001b[0m will be created\r\n\u001b[0m  \u001b[32m+\u001b[0m\u001b[0m resource \"aws_lambda_permission\" \"sns_alarms\" {\r\n      \u001b[32m+\u001b[0m\u001b[0m action              = \"lambda:InvokeFunction\"\r\n      \u001b[32m+\u001b[0m\u001b[0m function_name       = \"send-cloudwatch-alarms-to-slack\"\r\n      \u001b[32m+\u001b[0m\u001b[0m id                  = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m principal           = \"sns.amazonaws.com\"\r\n      \u001b[32m+\u001b[0m\u001b[0m source_arn          = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m statement_id        = \"AllowExecutionFromSNSAlarms\"\r\n      \u001b[32m+\u001b[0m\u001b[0m statement_id_prefix = (known after apply)\r\n    }\r\n"]
[24.136768, "o", "\r\n\u001b[1m  # module.notify.aws_s3_bucket.lambda_bucket\u001b[0m will be created\r\n\u001b[0m  \u001b[32m+\u001b[0m\u001b[0m resource \"aws_s3_bucket\" \"lambda_bucket\" {\r\n      \u001b[32m+\u001b[0m\u001b[0m acceleration_status         = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m acl                         = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m arn                         = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m bucket                      = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m bucket_domain_name          = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m bucket_prefix               = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m bucket_regional_domain_name = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m force_destroy               = true\r\n      \u001b[32m+\u001b[0m\u001b[0m hosted_zone_id              = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m id                          = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m object_lock_enabled         = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m policy                      = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m region          "]
[24.136808, "o", "            = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m request_payer               = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m tags_all                    = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m website_domain              = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m website_endpoint            = (known after apply)\r\n    }\r\n\r\n\u001b[1m  # module.notify.aws_s3_bucket_public_access_block.lambda_bucket\u001b[0m will be created\r\n\u001b[0m  \u001b[32m+\u001b[0m\u001b[0m resource \"aws_s3_bucket_public_access_block\" \"lambda_bucket\" {\r\n      \u001b[32m+\u001b[0m\u001b[0m block_public_acls       = true\r\n      \u001b[32m+\u001b[0m\u001b[0m block_public_policy     = true\r\n      \u001b[32m+\u001b[0m\u001b[0m bucket                  = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m id                      = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m ignore_public_acls      = true\r\n      \u001b[32m+\u001b[0m\u001b[0m restrict_public_buckets = true\r\n    }\r\n"]
[24.136926, "o", "\r\n\u001b[1m  # module.notify.aws_s3_object.send_cloudwatch_alarms_to_slack\u001b[0m will be created\r\n\u001b[0m  \u001b[32m+\u001b[0m\u001b[0m resource \"aws_s3_object\" \"send_cloudwatch_alarms_to_slack\" {\r\n      \u001b[32m+\u001b[0m\u001b[0m acl                    = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m bucket                 = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m bucket_key_enabled     = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m checksum_crc32         = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m checksum_crc32c        = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m checksum_sha1          = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m checksum_sha256        = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m content_type           = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m etag                   = \"b42521bfa9f66ffc74d1e119d60b5564\"\r\n      \u001b[32m+\u001b[0m\u001b[0m force_destroy          = false\r\n      \u001b[32m+\u001b[0m\u001b[0m id                     = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m key                    = \"send-cloudwatch-alarms-to-slack.zip\"\r\n      \u001b[32m+\u001b[0m\u001b[0m kms_ke"]
[24.136988, "o", "y_id             = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m server_side_encryption = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m source                 = \"functions/send-cloudwatch-alarms-to-slack.zip\"\r\n      \u001b[32m+\u001b[0m\u001b[0m storage_class          = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m tags_all               = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m version_id             = (known after apply)\r\n    }\r\n"]
[24.137143, "o", "\r\n\u001b[1m  # module.notify.aws_sns_topic.alarms\u001b[0m will be created\r\n\u001b[0m  \u001b[32m+\u001b[0m\u001b[0m resource \"aws_sns_topic\" \"alarms\" {\r\n      \u001b[32m+\u001b[0m\u001b[0m arn                                 = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m beginning_archive_time              = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m content_based_deduplication         = false\r\n      \u001b[32m+\u001b[0m\u001b[0m fifo_topic                          = false\r\n      \u001b[32m+\u001b[0m\u001b[0m id                                  = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m lambda_failure_feedback_role_arn    = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m lambda_success_feedback_role_arn    = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m lambda_success_feedback_sample_rate = 100\r\n      \u001b[32m+\u001b[0m\u001b[0m name                                = \"alarms\"\r\n      \u001b[32m+\u001b[0m\u001b[0m name_prefix                         = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m owner                               = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m policy                              = (known after app"]
[24.137164, "o", "ly)\r\n      \u001b[32m+\u001b[0m\u001b[0m signature_version                   = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m tags_all                            = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m tracing_config                      = (known after apply)\r\n    }\r\n\r\n\u001b[1m  # module.notify.aws_sns_topic_subscription.alarms\u001b[0m will be created\r\n\u001b[0m  \u001b[32m+\u001b[0m\u001b[0m resource \"aws_sns_topic_subscription\" \"alarms\" {\r\n      \u001b[32m+\u001b[0m\u001b[0m arn                             = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m confirmation_timeout_in_minutes = 1\r\n      \u001b[32m+\u001b[0m\u001b[0m confirmation_was_authenticated  = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m endpoint                        = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m endpoint_auto_confirms          = false\r\n      \u001b[32m+\u001b[0m\u001b[0m filter_policy_scope             = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m id                              = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m owner_id                        = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m pending_confirmation     "]
[24.137204, "o", "       = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m protocol                        = \"lambda\"\r\n      \u001b[32m+\u001b[0m\u001b[0m raw_message_delivery            = false\r\n      \u001b[32m+\u001b[0m\u001b[0m topic_arn                       = (known after apply)\r\n    }\r\n"]
[24.137224, "o", "\r\n\u001b[1m  # module.notify.random_pet.lambda_bucket_name\u001b[0m will be created\r\n\u001b[0m  \u001b[32m+\u001b[0m\u001b[0m resource \"random_pet\" \"lambda_bucket_name\" {\r\n      \u001b[32m+\u001b[0m\u001b[0m id        = (known after apply)\r\n      \u001b[32m+\u001b[0m\u001b[0m length    = 2\r\n      \u001b[32m+\u001b[0m\u001b[0m prefix    = \"lambda\"\r\n      \u001b[32m+\u001b[0m\u001b[0m separator = \"-\"\r\n    }\r\n\r\n\u001b[1mPlan:\u001b[0m 13 to add, 0 to change, 0 to destroy.\r\n\u001b[0m"]
[24.137268, "o", "\u001b[33m╷\u001b[0m\u001b[0m\r\n\u001b[33m│\u001b[0m \u001b[0m\u001b[1m\u001b[33mWarning: \u001b[0m\u001b[0m\u001b[1mResource targeting is in effect\u001b[0m\r\n\u001b[33m│\u001b[0m \u001b[0m\r\n\u001b[33m│\u001b[0m \u001b[0m\u001b[0mYou are creating a plan with the -target option, which means that the result of this plan may not represent all of the changes requested by the current configuration.\r\n\u001b[33m│\u001b[0m \u001b[0m\r\n\u001b[33m│\u001b[0m \u001b[0mThe -target option is not for routine use, and is provided only for exceptional situations such as recovering from errors or mistakes, or when Terraform specifically suggests to use it as part of an\r\n\u001b[33m│\u001b[0m \u001b[0merror message.\r\n\u001b[33m╵\u001b[0m\u001b[0m\r\n"]
[24.137288, "o", "\u001b[0m\u001b[1m\r\nDo you want to perform these actions?\u001b[0m\r\n  Terraform will perform the actions described above.\r\n  Only 'yes' will be accepted to approve.\r\n\r\n  \u001b[1mEnter a value:\u001b[0m \u001b[0m"]
[25.32872, "o", "y"]
[25.429246, "o", "e"]
[25.519711, "o", "s"]
[26.23183, "o", "\r\n"]
[26.231885, "o", "\r\n"]
[26.384345, "o", "\u001b[0m\u001b[1mmodule.notify.random_pet.lambda_bucket_name: Creating...\u001b[0m\u001b[0m\r\n"]
[26.386168, "o", "\u001b[0m\u001b[1mmodule.notify.random_pet.lambda_bucket_name: Creation complete after 0s [id=lambda-ready-pup]\u001b[0m\r\n"]
[26.693521, "o", "\u001b[0m\u001b[1mmodule.notify.aws_iam_role.send_cloudwatch_alarms_to_slack: Creating...\u001b[0m\u001b[0m\r\n"]
[26.693635, "o", "\u001b[0m\u001b[1mmodule.notify.aws_iam_role.sns_logs: Creating...\u001b[0m\u001b[0m\r\n"]
[26.69648, "o", "\u001b[0m\u001b[1mmodule.notify.aws_s3_bucket.lambda_bucket: Creating...\u001b[0m\u001b[0m\r\n"]
[27.640873, "o", "\u001b[0m\u001b[1mmodule.notify.aws_iam_role.send_cloudwatch_alarms_to_slack: Creation complete after 1s [id=send-cloudwatch-alarms-to-slack]\u001b[0m\r\n"]
[27.655457, "o", "\u001b[0m\u001b[1mmodule.notify.aws_iam_role.sns_logs: Creation complete after 1s [id=sns-logs]\u001b[0m\r\n"]
[27.655895, "o", "\u001b[0m\u001b[1mmodule.notify.aws_iam_role_policy_attachment.send_cloudwatch_alarms_to_slack_basic: Creating...\u001b[0m\u001b[0m\r\n"]
[27.670736, "o", "\u001b[0m\u001b[1mmodule.notify.aws_iam_role_policy_attachment.sns_logs: Creating...\u001b[0m\u001b[0m\r\n"]
[27.672793, "o", "\u001b[0m\u001b[1mmodule.notify.aws_sns_topic.alarms: Creating...\u001b[0m\u001b[0m\r\n"]
[28.023206, "o", "\u001b[0m\u001b[1mmodule.notify.aws_iam_role_policy_attachment.send_cloudwatch_alarms_to_slack_basic: Creation complete after 1s [id=send-cloudwatch-alarms-to-slack-20240127205254379200000001]\u001b[0m\r\n"]
[28.085266, "o", "\u001b[0m\u001b[1mmodule.notify.aws_iam_role_policy_attachment.sns_logs: Creation complete after 1s [id=sns-logs-20240127205254442900000002]\u001b[0m\r\n"]
[28.533751, "o", "\u001b[0m\u001b[1mmodule.notify.aws_s3_bucket.lambda_bucket: Creation complete after 2s [id=lambda-ready-pup]\u001b[0m\r\n"]
[28.552949, "o", "\u001b[0m\u001b[1mmodule.notify.aws_s3_bucket_public_access_block.lambda_bucket: Creating...\u001b[0m\u001b[0m\r\n"]
[28.555207, "o", "\u001b[0m\u001b[1mmodule.notify.aws_s3_object.send_cloudwatch_alarms_to_slack: Creating...\u001b[0m\u001b[0m\r\n"]
[28.913127, "o", "\u001b[0m\u001b[1mmodule.notify.aws_s3_object.send_cloudwatch_alarms_to_slack: Creation complete after 0s [id=send-cloudwatch-alarms-to-slack.zip]\u001b[0m\r\n"]
[28.930043, "o", "\u001b[0m\u001b[1mmodule.notify.aws_s3_bucket_public_access_block.lambda_bucket: Creation complete after 0s [id=lambda-ready-pup]\u001b[0m\r\n"]
[28.946302, "o", "\u001b[0m\u001b[1mmodule.notify.aws_lambda_function.send_cloudwatch_alarms_to_slack: Creating...\u001b[0m\u001b[0m\r\n"]
[36.596625, "o", "\u001b[0m\u001b[1mmodule.notify.aws_sns_topic.alarms: Creation complete after 9s [id=arn:aws:sns:eu-west-1:471112863051:alarms]\u001b[0m\r\n"]
[38.741821, "o", "\u001b[0m\u001b[1mmodule.notify.aws_lambda_function.send_cloudwatch_alarms_to_slack: Creation complete after 10s [id=send-cloudwatch-alarms-to-slack]\u001b[0m\r\n"]
[38.757692, "o", "\u001b[0m\u001b[1mmodule.notify.aws_cloudwatch_log_group.send_cloudwatch_alarms_to_slack: Creating...\u001b[0m\u001b[0m\r\n"]
[38.760209, "o", "\u001b[0m\u001b[1mmodule.notify.aws_sns_topic_subscription.alarms: Creating...\u001b[0m\u001b[0m\r\n"]
[38.76041, "o", "\u001b[0m\u001b[1mmodule.notify.aws_lambda_permission.sns_alarms: Creating...\u001b[0m\u001b[0m\r\n"]
[39.073385, "o", "\u001b[0m\u001b[1mmodule.notify.aws_sns_topic_subscription.alarms: Creation complete after 1s [id=arn:aws:sns:eu-west-1:471112863051:alarms:eee3cd25-4b30-49f3-bea8-149edb8e6237]\u001b[0m\r\n"]
[39.090008, "o", "\u001b[0m\u001b[1mmodule.notify.aws_lambda_permission.sns_alarms: Creation complete after 1s [id=AllowExecutionFromSNSAlarms]\u001b[0m\r\n"]
[39.204812, "o", "\u001b[0m\u001b[1mmodule.notify.aws_cloudwatch_log_group.send_cloudwatch_alarms_to_slack: Creation complete after 1s [id=/aws/lambda/send-cloudwatch-alarms-to-slack]\u001b[0m\r\n"]
[39.239291, "o", "\u001b[33m╷\u001b[0m\u001b[0m\r\n\u001b[33m│\u001b[0m \u001b[0m\u001b[1m\u001b[33mWarning: \u001b[0m\u001b[0m\u001b[1mApplied changes may be incomplete\u001b[0m\r\n\u001b[33m│\u001b[0m \u001b[0m\r\n\u001b[33m│\u001b[0m \u001b[0m\u001b[0mThe plan was created with the -target option in effect, so some changes requested in the configuration may have been ignored and the output values may not be fully updated. Run the following command to\r\n\u001b[33m│\u001b[0m \u001b[0mverify that no other changes are pending:\r\n\u001b[33m│\u001b[0m \u001b[0m    terraform plan\r\n\u001b[33m│\u001b[0m \u001b[0m\t\r\n\u001b[33m│\u001b[0m \u001b[0mNote that the -target option is not suitable for routine use, and is provided only for exceptional situations such as recovering from errors or mistakes, or when Terraform specifically suggests to use it\r\n\u001b[33m│\u001b[0m \u001b[0mas part of an error message.\r\n\u001b[33m╵\u001b[0m\u001b[0m\r\n"]
[39.239745, "o", "\u001b[0m\u001b[1m\u001b[32m\r\nApply complete! Resources: 13 added, 0 changed, 0 destroyed.\r\n\u001b[0m\u001b[0m\u001b[1m\u001b[32m\r\nOutputs:\r\n\r\n\u001b[0minstance_master_public_ip = \"3.251.82.218\"\r\ninstance_workers_public_ip = [\r\n  \"54.195.182.224\",\r\n]\r\n"]
[39.248175, "o", "\u001b[?2004hvictor@victors-ubuntu:~/Downloads/DevOps-Upskill-23/terraform$ "]
[43.423835, "o", "e"]
[43.546825, "o", "x"]
[43.676341, "o", "i"]
[43.822834, "o", "t"]
[44.070758, "o", "\r\n\u001b[?2004l\r"]
[44.070788, "o", "exit\r\n"]
